{
  "info": {
    "title": "Lab Helpers",
    "version": "1.10.0",
    "description": "API que acompaña a Ansible Tower para levantar ambientes de desarrollo durante los workshops de DevOps 101 de Conatel, y otras instancias."
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "host": "ansibletower.conatest.click",
  "basePath": "/helpers/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "SecretAuthentication": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Lab-Helpers-Secret"
    },
    "JWTTokenAuthentication": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "swagger": "2.0",
  "paths": {
    "/api": {
      "get": {
        "summary": "Devuelve información básica de la API",
        "description": "Se puede utilizar este endpoint para comenzar a recorrer la API. Las URL para todas las versiones de la misma, y la URL para la autenticación con la misma pueden encontrarse en esta respuesta.\n",
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "description": "AWX Helper API",
                "current_version": "/api/v1/",
                "available_versions": {
                  "v1": "/api/v1/"
                },
                "auth": "/api/auth/"
              }
            },
            "description": "OK"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/": {
      "get": {
        "summary": "Devuelve información básica de la API",
        "description": "Se puede utilizar este endpoint para recorrer la versión 1 de la API. En la respuesta se detallan todos los recursos disponibles bajo este namespace.\n",
        "tags": [
          "default"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "files": "/api/v1/files/",
                "uploads": "/api/v1/uploads/",
                "documents": "/api/v1/documents/",
                "jobs": "/api/v1/jobs/"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/files/{filename}": {
      "get": {
        "summary": "Devuelve el archivo almacenado en el servidor según su `filename`",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "required": true,
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "Nombre del archivo almacenado."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "files"
        ],
        "responses": {
          "200": {
            "description": "El archivo buscado.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/auth/": {
      "get": {
        "summary": "Devuelve información básica de la API",
        "description": "Se puede utilizar este endpoint para recorrer la API de autenticación. En la respuesta se detallan todos los endpoints disponibles bajo este namespace.\n",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "login": "/helpers/api/auth/login/",
                "signup": "/helpers/api/auth/signup/"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/auth/login/": {
      "post": {
        "summary": "Inicia la sesión de un usuario.",
        "description": "Autenticación al sistema. Si las credenciales son validas, se devuelve el `id` y `access` token con el cual podrán acceder al resto de los recurso, dependiendo del perfil del usuario. El token de `id` contiene la información del usuario. Pueden usarse cualquiera de los dos tokens para interactuar con la API pero se sugiere que se utilice el de `access` dado que es más pequeño. Ambos tokens son validos por 1 hora.\n",
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "required": true,
            "description": "Credenciales de usuario. Ambos campos son obligatorios.",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/auth/refresh/": {
      "post": {
        "summary": "Refresca los tokens de acceso e identidad.",
        "description": "El `refreshToken` es valido por 30 días. Durante este tiempo, el usuario puede intercambiarlo por nuevos tokens.\n",
        "parameters": [
          {
            "in": "body",
            "name": "refreshToken",
            "required": true,
            "description": "Token para refrescar los tokens de autenticación.",
            "schema": {
              "$ref": "#/definitions/RefreshToken"
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/auth/signup/": {
      "post": {
        "summary": "Crea un nuevo usuario.",
        "description": "Crea un nuevo usuario. Solamente pueden crear nuevos usuarios aquellos que cuenten con el secreto de la aplicación. El mismo se define al momento de ejecutar la aplicación por el administrador del sistema.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "user",
            "description": "Datos de usuario a crear.",
            "schema": {
              "$ref": "#/definitions/UserBody"
            }
          }
        ],
        "security": [
          {
            "SecretAuthentication": []
          }
        ],
        "tags": [
          "auth"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/documents/": {
      "get": {
        "summary": "Devuelve una lista de documentos paginada.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "description": "Limite de documentos a devolver."
          },
          {
            "in": "query",
            "name": "offset",
            "type": "number",
            "minimum": 0,
            "description": "Valor de offset según el cual se paginan los resultados."
          },
          {
            "in": "query",
            "name": "sortBy",
            "type": "string",
            "default": "id",
            "description": "Valor de la variable por la cual se ordenan los resultados.\n"
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "documents"
        ],
        "responses": {
          "200": {
            "description": "La lista de documentos paginada.",
            "schema": {
              "$ref": "#/definitions/Documents"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "summary": "Almacena un documento.",
        "description": "El documento a almacenar puede ser cualquier objeto JSON. La aplicación almacenara el documento en la base, y devolverá el ID donde puede recuperarse.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "document",
            "description": "Objeto JSON.",
            "schema": {
              "$ref": "#/definitions/AnyObject"
            }
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "documents"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/documents/{id}": {
      "get": {
        "summary": "Devuelve un documento según su 'id'.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del documento."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "documents"
        ],
        "responses": {
          "200": {
            "description": "El documento buscado.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "summary": "Actualiza un documento identificado por su 'id'.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del documento."
          },
          {
            "in": "body",
            "required": true,
            "name": "document",
            "description": "Objeto JSON.",
            "schema": {
              "$ref": "#/definitions/AnyObject"
            }
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "documents"
        ],
        "responses": {
          "200": {
            "description": "El documento buscado.",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "Elimina un documento según su 'id'.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del documento."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "documents"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}/": {
      "get": {
        "summary": "Devuelve el `job` buscado.",
        "description": "Devuelve la información de un `job` identificado por su `id`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del `job`."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "El `job` buscado.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/jobs/launch/{name}/": {
      "post": {
        "summary": "Corre un `job_template` en el servidor de AWX o Ansible Tower.",
        "description": "Endpoint para lanzar un `template` en el servidor. En la respuesta se incluye toda la información para interactuar con este trabajo. Por ejemplo: cancelar, relanzar, y ver en tiempo real su ejecución.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "Nombre del `template` en AWX."
          },
          {
            "in": "body",
            "required": true,
            "name": "extra_vars",
            "description": "Objeto JSON con las variables necesarias para correr el `template`.",
            "schema": {
              "$ref": "#/definitions/AnyObject"
            }
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Detalles sobre la ejecución del `playbook`.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/jobs/stdout/{id}/": {
      "get": {
        "summary": "Devuelve la salida del `job`.",
        "description": "Devuelve la salida en distintos formatos de la ejecución del `job`. Los formator permitidos son: `html`, `txt`, `ansi`, `json`, `txt_download`, `ansi_download`. También se puede indicar si se quiere la versión con fondo oscuro o no a través de la opción `dark` que puede tomar valores de `1` para si y `0` para no. Su valor por defecto es `1`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del `job`."
          },
          {
            "in": "query",
            "name": "format",
            "type": "string",
            "enum": [
              "html",
              "txt",
              "txt_download",
              "ansi",
              "ansi_download",
              "json"
            ],
            "description": "Formato en el que se descargara la salida del `playbook`."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Stream de ejecución del `job` en el formato especificado.",
            "produces": [
              "text/html; charset=utf-8"
            ]
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/jobs/cancel/{id}/": {
      "get": {
        "summary": "Cancela la ejecución del `job`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del `job`."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/jobs/relaunch/{id}/": {
      "get": {
        "summary": "Reinicia la ejecución del `job`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "minimum": 1,
            "maximum": 1,
            "description": "ID del `job`."
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Estado del `job`.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/uploads/text/": {
      "post": {
        "summary": "Almacena un archivo de texto en el servidor.",
        "description": "El string de texto enviado en la variable `text` del cuerpo del mensaje es almacenado como un archivo en el servidor. El nombre del mismo puede indicarse a través de la llave `filename` incluida la extensión. En caso de no configurarla, se le asignara un codigo aleatorio al archivo.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "document",
            "description": "Objeto JSON.",
            "schema": {
              "$ref": "#/definitions/TextDocument"
            }
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "uploads"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/api/v1/uploads/json/": {
      "post": {
        "summary": "Almacena un archivo JSON en el servidor.",
        "description": "El objeto JSON enviado en la variable `json` del cuerpo del mensaje es almacenado como un archivo en el servidor. El nombre con el cual será almacenado corresponderá a un codigo aleatorio tipo `cuid`.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "document",
            "description": "Objeto JSON.",
            "schema": {
              "$ref": "#/definitions/JSONDocument"
            }
          }
        ],
        "security": [
          {
            "JWTTokenAuthentication": []
          }
        ],
        "tags": [
          "uploads"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "AnyObject": {
      "description": "Cualquier objeto.",
      "type": "object",
      "example": {
        "something": "awesome"
      }
    },
    "ID": {
      "description": "ID del recurso. Compatible con CUID.",
      "type": "string",
      "pattern": "^c[^\\s-]{8,}$",
      "example": "cjld2cjxh0000qzrmn831i7rn"
    },
    "Count": {
      "description": "Cantidad de elementos devueltos.",
      "type": "number",
      "example": 1
    },
    "DocumentURL": {
      "description": "URL correspondiente al recurso.",
      "type": "string",
      "pattern": "^(/[^/ ]*)+/?$",
      "example": "/helpers/api/v1/documents/cjld2cjxh0000qzrmn831i7rn"
    },
    "FilesURL": {
      "description": "URL correspondiente al recurso.",
      "type": "string",
      "pattern": "^(/[^/ ]*)+/?$",
      "example": "/helpers/api/v1/files/archivo.txt"
    },
    "Email": {
      "description": "Dirección de Email",
      "type": "string",
      "format": "email",
      "example": "example@someplace.com"
    },
    "Password": {
      "description": "Contraseña",
      "type": "string",
      "format": "password",
      "example": "secret"
    },
    "CreatedDate": {
      "description": "Fecha de creación del recuro",
      "type": "string",
      "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+",
      "example": "2018-10-19T14:06:44.271Z"
    },
    "UpdatedDate": {
      "description": "Fecha de actualización del recuro",
      "type": "string",
      "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+",
      "example": "2018-10-20T15:26:44.271Z"
    },
    "Error": {
      "description": "Objeto con mensaje de error.",
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Mensaje de error.",
          "example": "no existe un recurso identificado por la id 'cjld2cjxh0000qzrmn831i7rn'"
        }
      }
    },
    "Credentials": {
      "description": "Objeto con credenciales de acceso.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/Email"
        },
        "password": {
          "$ref": "#/definitions/Password"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "Tokens": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "idToken": {
          "description": "Token JWT que contiene información del usuario. Puede utilizarse para interactuar con la API.\n",
          "type": "string",
          "format": "base64",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImV4YW1wbGVAc29tZXBsYWNlLmNvbSIsInVzZXJuYW1lIjoidXNlciIsIm5hbWUiOiJKb2huIERvZSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTUzOTk2NDc3NX0.dlmEXpv8PCdJuw2XpENLPrhIFqTyUfwvh5ijNAdlKpI"
        },
        "accessToken": {
          "description": "Token JWT. Puede utilizarse para interactuar con la API.\n",
          "type": "string",
          "format": "base64",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Mzk5NjQ3NzV9.FP2_tkky1VartaGJO9DmO0YXl_K7FeQWSCZKIRK9k04"
        }
      }
    },
    "UserBody": {
      "description": "Usuario.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/Email"
        },
        "password": {
          "$ref": "#/definitions/Password"
        },
        "username": {
          "description": "Nombre de cuenta del usuario.",
          "type": "string",
          "example": "user"
        },
        "name": {
          "description": "Nombre de usuario.",
          "type": "string",
          "example": "John Doe"
        },
        "role": {
          "description": "Rol para definir el nivel de acceso del usuario.",
          "type": "string",
          "enum": [
            "admin",
            "user"
          ]
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "User": {
      "description": "Usuario.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/Email"
        },
        "username": {
          "description": "Nombre de cuenta del usuario.",
          "type": "string",
          "example": "user"
        },
        "name": {
          "description": "Nombre de usuario.",
          "type": "string",
          "example": "John Doe"
        },
        "role": {
          "description": "Rol para definir el nivel de acceso del usuario.",
          "type": "string",
          "enum": [
            "admin",
            "user"
          ]
        }
      }
    },
    "Next": {
      "description": "URL para obtener la siguiente lista de recursos, paginados utilizando las opciones `offset` y `limit`.",
      "type": "string",
      "pattern": "^(/[^/ ]*)+/?$",
      "example": "/helpers/api/v1/documents/?offset=20&limit=10"
    },
    "Previous": {
      "description": "URL para obtener la anterior lista de recursos, paginados utilizando las opciones `offset` y `limit`.",
      "type": "string",
      "pattern": "^(/[^/ ]*)+/?$",
      "example": "/helpers/api/v1/documents/?offset=0&limit=10"
    },
    "Documents": {
      "type": "object",
      "description": "Lista de documentos.",
      "properties": {
        "count": {
          "$ref": "#/definitions/Count"
        },
        "next": {
          "$ref": "#/definitions/Next"
        },
        "previous": {
          "$ref": "#/definitions/Previous"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Document"
          }
        }
      }
    },
    "TextDocument": {
      "type": "object",
      "description": "Parámetros para almacenar un archivo de texto en el servidor.",
      "properties": {
        "filename": {
          "$ref": "#/definitions/FileName"
        },
        "text": {
          "type": "string",
          "description": "Texto a almacenar en un archivo en el servidor.",
          "example": "Hello, World!"
        }
      }
    },
    "JSONDocument": {
      "type": "object",
      "description": "Parámetros para almacenar un archivo JSON en el servidor.",
      "properties": {
        "json": {
          "$ref": "#/definitions/AnyObject"
        }
      }
    },
    "FileName": {
      "type": "string",
      "description": "Nombre del archivo a almacenar, incluyendo su extensión.",
      "example": "archivo.txt"
    },
    "File": {
      "type": "object",
      "description": "Metadatos de archivo almacenado en el servidor.",
      "properties": {
        "id": {
          "$ref": "#/definitions/ID"
        },
        "type": {
          "type": "string",
          "enum": [
            "files"
          ],
          "description": "Tipo del recurso.",
          "example": "files"
        },
        "url": {
          "$ref": "#/definitions/FilesURL"
        },
        "created": {
          "$ref": "#/definitions/CreatedDate"
        },
        "updated": {
          "$ref": "#/definitions/UpdatedDate"
        },
        "filename": {
          "$ref": "#/definitions/FileName"
        }
      }
    },
    "JobData": {
      "type": "object",
      "description": "Detalle sobre un `job` de AWS o AnsibleTower",
      "properties": {
        "description": {
          "type": "string",
          "description": "Descripción del `job`.",
          "example": "Destruye un POD"
        },
        "extra_vars": {
          "$ref": "#/definitions/AnyObject"
        },
        "name": {
          "type": "string",
          "description": "Nombre del `job`.",
          "example": "Lab Pod - Down"
        },
        "playbook": {
          "type": "string",
          "description": "Nombre del `playbook` que el `job` esta ejecutando.",
          "example": "pod_down.yml"
        },
        "status": {
          "type": "string",
          "description": "Estado del `job`.",
          "example": "pending",
          "enum": [
            "pending",
            "successful",
            "failed"
          ]
        }
      }
    },
    "JobRelatedLinks": {
      "type": "object",
      "description": "Lista de links relacionados con el `job`.",
      "properties": {
        "activity_stream": {
          "type": "string",
          "description": "URL para acceder al `activity_stream` del `job`.",
          "pattern": "^(/[^/ ]*)+/?$",
          "example": "/helpers/api/v1/jobs/activity_stream/cjnn9z2970000zptca25ygpsi/"
        },
        "cancel": {
          "type": "string",
          "description": "URL para cancelar la ejecución del `job`.",
          "pattern": "^(/[^/ ]*)+/?$",
          "example": "/helpers/api/v1/jobs/cancel/cjnn9z2970000zptca25ygpsi/"
        },
        "stdout": {
          "type": "string",
          "description": "URL para acceder a la salida de la ejecución del `job`.",
          "pattern": "^(/[^/ ]*)+/?$",
          "example": "/helpers/api/v1/jobs/stdout/cjnn9z2970000zptca25ygpsi/"
        },
        "relaunch": {
          "type": "string",
          "description": "URL para volver a lanzar la ejecución del `job`.",
          "pattern": "^(/[^/ ]*)+/?$",
          "example": "/helpers/api/v1/jobs/relaunch/cjnn9z2970000zptca25ygpsi/"
        }
      }
    },
    "Job": {
      "type": "object",
      "description": "Descripción de un `job` de AWX o Ansible Tower.",
      "properties": {
        "created": {
          "$ref": "#/definitions/CreatedDate"
        },
        "data": {
          "$ref": "#/definitions/JobData"
        },
        "id": {
          "$ref": "#/definitions/ID"
        },
        "type": {
          "type": "string",
          "enum": [
            "jobs"
          ]
        },
        "related": {
          "$ref": "#/definitions/JobRelatedLinks"
        },
        "url": {
          "$ref": "#/definitions/DocumentURL"
        },
        "updated": {
          "$ref": "#/definitions/UpdatedDate"
        }
      }
    },
    "RefreshToken": {
      "type": "object",
      "description": "Argumentos necesarios para refrescar los tokens de autenticación.",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token JWT para refrescar los tokens de autenticación. Identificado como `refreshToken`."
        }
      }
    },
    "Document": {
      "type": "object",
      "description": "Documento JSON almacenado en la base.",
      "properties": {
        "created": {
          "$ref": "#/definitions/CreatedDate"
        },
        "data": {
          "$ref": "#/definitions/AnyObject"
        },
        "id": {
          "$ref": "#/definitions/ID"
        },
        "type": {
          "type": "string",
          "enum": [
            "documents"
          ],
          "description": "Tipo del recurso.",
          "example": "document"
        },
        "url": {
          "$ref": "#/definitions/DocumentURL"
        },
        "updated": {
          "$ref": "#/definitions/UpdatedDate"
        }
      }
    }
  },
  "responses": {
    "Unauthorized": {
      "description": "No cuenta con credenciales suficientes para acceder a este recurso.\n",
      "schema": {
        "type": "string",
        "example": "Unauthorized"
      }
    },
    "NotFound": {
      "description": "El recurso requerido, un documento por ejemplo, no fue encontrado.\n",
      "schema": {
        "type": "string",
        "example": "Not Found"
      }
    },
    "ServerError": {
      "description": "Algo sucedio en el servidor y no puede responder\n",
      "schema": {
        "type": "string",
        "example": "Server Error"
      }
    },
    "NoContent": {
      "description": ""
    },
    "Error": {
      "description": "El request es invalido o no puede procesarse. Un mensaje de error con más información seré provisto en el cuerpo del mensaje.\n",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "parameters": {},
  "tags": []
}